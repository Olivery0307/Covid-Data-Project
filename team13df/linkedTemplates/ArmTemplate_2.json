{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "team13df"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "populationcsv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Populationparquet",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-15T22:34:58Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "sqlvmmetrics",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Updated",
						"type": "date"
					},
					{
						"name": "Confirmed",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Confirmed_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Deaths",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Deaths_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recovered",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Recovered_Change",
						"type": "int",
						"precision": 10
					},
					{
						"name": "Latitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "ISO2",
						"type": "varchar"
					},
					{
						"name": "ISO3",
						"type": "varchar"
					},
					{
						"name": "Country_Region",
						"type": "varchar"
					},
					{
						"name": "load_time",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Covid19_Metrics"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SqlServerTable2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "link3VM",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "DateKey",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FullDate",
						"type": "date"
					},
					{
						"name": "isWeekDay",
						"type": "bit"
					},
					{
						"name": "DayOfWeek",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "DayName",
						"type": "varchar"
					},
					{
						"name": "WeekOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "WeekName",
						"type": "varchar"
					},
					{
						"name": "MonthOfYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "MonthName",
						"type": "varchar"
					},
					{
						"name": "CalendarQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "CalendarQuarterName",
						"type": "varchar"
					},
					{
						"name": "CalendarYear",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalMonth",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalMonthName",
						"type": "varchar"
					},
					{
						"name": "FiscalQuarter",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FiscalQuarterName",
						"type": "varchar"
					},
					{
						"name": "FiscalYear",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Dates"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/vmsql1')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "SHIRlink",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "SqlServerTable",
				"schema": [
					{
						"name": "Country",
						"type": "varchar"
					},
					{
						"name": "CountryCode",
						"type": "varchar"
					},
					{
						"name": "Latitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					},
					{
						"name": "Longitude",
						"type": "decimal",
						"precision": 10,
						"scale": 5
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "Country"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ParquetMetricsVM",
								"type": "DatasetReference"
							},
							"name": "MetricsVM"
						},
						{
							"dataset": {
								"referenceName": "sql_metrics",
								"type": "DatasetReference"
							},
							"name": "MetricsSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_dates",
								"type": "DatasetReference"
							},
							"name": "DatesSQL"
						},
						{
							"dataset": {
								"referenceName": "sql_country",
								"type": "DatasetReference"
							},
							"name": "CountrySQL"
						},
						{
							"dataset": {
								"referenceName": "cosmos_policy",
								"type": "DatasetReference"
							},
							"name": "PolicyDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Cases",
								"type": "DatasetReference"
							},
							"name": "Cases"
						},
						{
							"dataset": {
								"referenceName": "Deaths",
								"type": "DatasetReference"
							},
							"name": "Deaths"
						},
						{
							"dataset": {
								"referenceName": "Recoveries",
								"type": "DatasetReference"
							},
							"name": "Recoveries"
						},
						{
							"dataset": {
								"referenceName": "Dates",
								"type": "DatasetReference"
							},
							"name": "Dates"
						},
						{
							"dataset": {
								"referenceName": "Policies",
								"type": "DatasetReference"
							},
							"name": "Policies"
						},
						{
							"dataset": {
								"referenceName": "Countries",
								"type": "DatasetReference"
							},
							"name": "Countries"
						}
					],
					"transformations": [
						{
							"name": "MetricsUnion"
						},
						{
							"name": "Case"
						},
						{
							"name": "Death"
						},
						{
							"name": "Recovery"
						},
						{
							"name": "Date"
						},
						{
							"name": "Policy"
						},
						{
							"name": "Country"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> MetricsVM",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> MetricsSQL",
						"source(output(",
						"          DateKey as integer,",
						"          FullDate as date,",
						"          isWeekDay as boolean,",
						"          DayOfWeek as integer,",
						"          DayOfMonth as integer,",
						"          DayOfQuarter as integer,",
						"          DayOfYear as integer,",
						"          DayName as string,",
						"          WeekOfYear as integer,",
						"          WeekName as string,",
						"          MonthOfYear as integer,",
						"          MonthName as string,",
						"          CalendarQuarter as integer,",
						"          CalendarQuarterName as string,",
						"          CalendarYear as integer,",
						"          FiscalMonth as integer,",
						"          FiscalMonthName as string,",
						"          FiscalQuarter as integer,",
						"          FiscalQuarterName as string,",
						"          FiscalYear as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> DatesSQL",
						"source(output(",
						"          Country as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5)",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> CountrySQL",
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as date,",
						"          C1_School_closing as double,",
						"          C1_Flag as boolean,",
						"          C2_Workplace_closing as double,",
						"          C2_Flag as boolean,",
						"          C3_Cancel_public_events as double,",
						"          C3_Flag as boolean,",
						"          C4_Restrictions_on_gatherings as double,",
						"          C4_Flag as boolean,",
						"          C5_Close_public_transport as double,",
						"          C5_Flag as boolean,",
						"          C6_Stay_at_home_requirements as double,",
						"          C6_Flag as boolean,",
						"          C7_Restrictions_on_internal_movement as double,",
						"          C7_Flag as boolean,",
						"          C8_International_travel_controls as double,",
						"          E1_Income_support as long,",
						"          E1_Flag as boolean,",
						"          E2_Debt_contract_relief as double,",
						"          E3_Fiscal_measures as double,",
						"          E4_International_support as double,",
						"          H1_Public_information_campaigns as double,",
						"          H1_Flag as boolean,",
						"          H2_Testing_policy as long,",
						"          H3_Contact_tracing as double,",
						"          H4_Emergency_investment_in_healthcare as double,",
						"          H5_Investment_in_vaccines as double,",
						"          H6_Facial_Coverings as double,",
						"          H6_Flag as boolean,",
						"          H7_Vaccination_policy as double,",
						"          H7_Flag as boolean,",
						"          H8_Protection_of_elderly_people as long,",
						"          H8_Flag as boolean,",
						"          M1_Wildcard as double,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> PolicyDB",
						"MetricsVM, MetricsSQL union(byName: true)~> MetricsUnion",
						"MetricsUnion select(mapColumn(",
						"          CasesID = ID,",
						"          Updated,",
						"          Confirmed,",
						"          Confirmed_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Case",
						"MetricsUnion select(mapColumn(",
						"          DeathsID = ID,",
						"          Updated,",
						"          Deaths,",
						"          Deaths_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Death",
						"MetricsUnion select(mapColumn(",
						"          RecoveriesID = ID,",
						"          Updated,",
						"          Recovered,",
						"          Recovered_Change,",
						"          Country_Region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Recovery",
						"DatesSQL select(mapColumn(",
						"          DateKey = FullDate,",
						"          isWeekDay,",
						"          DayOfWeek,",
						"          DayOfMonth,",
						"          DayOfQuarter,",
						"          DayOfYear,",
						"          DayName,",
						"          WeekOfYear,",
						"          WeekName,",
						"          MonthOfYear,",
						"          MonthName,",
						"          CalendarQuarter,",
						"          CalendarQuarterName,",
						"          CalendarYear,",
						"          FiscalMonth,",
						"          FiscalMonthName,",
						"          FiscalQuarter,",
						"          FiscalQuarterName,",
						"          FiscalYear",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Date",
						"PolicyDB select(mapColumn(",
						"          CountryName,",
						"          CountryCode,",
						"          RegionName,",
						"          RegionCode,",
						"          Jurisdiction,",
						"          DateKey = Date,",
						"          C1_School_closing,",
						"          C1_Flag,",
						"          C2_Workplace_closing,",
						"          C2_Flag,",
						"          C3_Cancel_public_events,",
						"          C3_Flag,",
						"          C4_Restrictions_on_gatherings,",
						"          C4_Flag,",
						"          C5_Close_public_transport,",
						"          C5_Flag,",
						"          C6_Stay_at_home_requirements,",
						"          C6_Flag,",
						"          C7_Restrictions_on_internal_movement,",
						"          C7_Flag,",
						"          C8_International_travel_controls,",
						"          E1_Income_support,",
						"          E1_Flag,",
						"          E2_Debt_contract_relief,",
						"          E3_Fiscal_measures,",
						"          E4_International_support,",
						"          H1_Public_information_campaigns,",
						"          H1_Flag,",
						"          H2_Testing_policy,",
						"          H3_Contact_tracing,",
						"          H4_Emergency_investment_in_healthcare,",
						"          H5_Investment_in_vaccines,",
						"          H6_Facial_Coverings,",
						"          H6_Flag,",
						"          H7_Vaccination_policy,",
						"          H7_Flag,",
						"          H8_Protection_of_elderly_people,",
						"          H8_Flag,",
						"          M1_Wildcard,",
						"          StringencyIndex,",
						"          StringencyIndexForDisplay,",
						"          StringencyLegacyIndex,",
						"          StringencyLegacyIndexForDisplay,",
						"          GovernmentResponseIndex,",
						"          GovernmentResponseIndexForDisplay,",
						"          ContainmentHealthIndex,",
						"          ContainmentHealthIndexForDisplay,",
						"          EconomicSupportIndex,",
						"          EconomicSupportIndexForDisplay,",
						"          PolicyID = id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Policy",
						"CountrySQL select(mapColumn(",
						"          CountryID = Country,",
						"          CountryCode,",
						"          Latitude,",
						"          Longitude",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Country",
						"Case sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['cases.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Cases",
						"Death sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['deaths.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Deaths",
						"Recovery sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['recoveries.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Recoveries",
						"Date sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['dates.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Dates",
						"Policy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['policies.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Policies",
						"Country sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     partitionFileNames:['countries.parquet'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Countries"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "AzureSqlMetrics",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "ParquetMetricsVM",
								"type": "DatasetReference"
							},
							"name": "source2"
						},
						{
							"dataset": {
								"referenceName": "Countries",
								"type": "DatasetReference"
							},
							"name": "source3"
						},
						{
							"dataset": {
								"referenceName": "cosmos_policy",
								"type": "DatasetReference"
							},
							"name": "policy"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Parquet1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "Parquet2",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "union1"
						},
						{
							"name": "select1"
						},
						{
							"name": "surrogateKey1"
						},
						{
							"name": "join1"
						},
						{
							"name": "cast1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "join2"
						},
						{
							"name": "cast2"
						},
						{
							"name": "derivedColumn2"
						},
						{
							"name": "select2"
						},
						{
							"name": "surrogateKey2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source1",
						"source(output(",
						"          ID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Deaths as integer,",
						"          Deaths_Change as integer,",
						"          Recovered as integer,",
						"          Recovered_Change as integer,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          ISO2 as string,",
						"          ISO3 as string,",
						"          Country_Region as string,",
						"          load_time as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source2",
						"source(output(",
						"          Country_Name as string,",
						"          CountryCode as string,",
						"          Latitude as decimal(10,5),",
						"          Longitude as decimal(10,5),",
						"          Country_id as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> source3",
						"source(output(",
						"          CountryName as string,",
						"          CountryCode as string,",
						"          RegionName as string,",
						"          RegionCode as string,",
						"          Jurisdiction as string,",
						"          Date as timestamp,",
						"          C1_School_closing as double,",
						"          C1_Flag as boolean,",
						"          C2_Workplace_closing as double,",
						"          C2_Flag as boolean,",
						"          C3_Cancel_public_events as double,",
						"          C3_Flag as boolean,",
						"          C4_Restrictions_on_gatherings as double,",
						"          C4_Flag as boolean,",
						"          C5_Close_public_transport as double,",
						"          C5_Flag as boolean,",
						"          C6_Stay_at_home_requirements as double,",
						"          C6_Flag as boolean,",
						"          C7_Restrictions_on_internal_movement as double,",
						"          C7_Flag as boolean,",
						"          C8_International_travel_controls as double,",
						"          E1_Income_support as long,",
						"          E1_Flag as boolean,",
						"          E2_Debt_contract_relief as double,",
						"          E3_Fiscal_measures as double,",
						"          E4_International_support as double,",
						"          H1_Public_information_campaigns as double,",
						"          H1_Flag as boolean,",
						"          H2_Testing_policy as long,",
						"          H3_Contact_tracing as double,",
						"          H4_Emergency_investment_in_healthcare as double,",
						"          H5_Investment_in_vaccines as double,",
						"          H6_Facial_Coverings as double,",
						"          H6_Flag as boolean,",
						"          H7_Vaccination_policy as double,",
						"          H7_Flag as boolean,",
						"          H8_Protection_of_elderly_people as long,",
						"          H8_Flag as boolean,",
						"          M1_Wildcard as double,",
						"          StringencyIndex as double,",
						"          StringencyIndexForDisplay as double,",
						"          StringencyLegacyIndex as double,",
						"          StringencyLegacyIndexForDisplay as double,",
						"          GovernmentResponseIndex as double,",
						"          GovernmentResponseIndexForDisplay as double,",
						"          ContainmentHealthIndex as double,",
						"          ContainmentHealthIndexForDisplay as double,",
						"          EconomicSupportIndex as double,",
						"          EconomicSupportIndexForDisplay as double,",
						"          id as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'parquet') ~> policy",
						"source1, source2 union(byName: true)~> union1",
						"join1 select(mapColumn(",
						"          MetricsKey = ID,",
						"          DateKey = Updated,",
						"          CountryKey = Country_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"derivedColumn1 keyGenerate(output(Fact_key as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey1",
						"union1, source3 join(Country_Region == Country_Name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"select1 cast(output(",
						"          DateKey as string",
						"     ),",
						"     errors: true) ~> cast1",
						"cast1 derive(DateKey = replace(DateKey, '-', '')) ~> derivedColumn1",
						"policy, source3 join(CountryName == Country_Name,",
						"     joinType:'left',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join2",
						"join2 cast(output(",
						"          Date as string",
						"     ),",
						"     errors: true) ~> cast2",
						"cast2 derive(Date = substring(replace(Date, '-', ''), 0, 8)) ~> derivedColumn2",
						"derivedColumn2 select(mapColumn(",
						"          Jurisdiction,",
						"          DateKey = Date,",
						"          C1_School_closing,",
						"          C1_Flag,",
						"          C2_Workplace_closing,",
						"          C2_Flag,",
						"          C3_Cancel_public_events,",
						"          C3_Flag,",
						"          C4_Restrictions_on_gatherings,",
						"          C4_Flag,",
						"          C5_Close_public_transport,",
						"          C5_Flag,",
						"          C6_Stay_at_home_requirements,",
						"          C6_Flag,",
						"          C7_Restrictions_on_internal_movement,",
						"          C7_Flag,",
						"          C8_International_travel_controls,",
						"          E1_Income_support,",
						"          E1_Flag,",
						"          E2_Debt_contract_relief,",
						"          E3_Fiscal_measures,",
						"          E4_International_support,",
						"          H1_Public_information_campaigns,",
						"          H1_Flag,",
						"          H2_Testing_policy,",
						"          H3_Contact_tracing,",
						"          H4_Emergency_investment_in_healthcare,",
						"          H5_Investment_in_vaccines,",
						"          H6_Facial_Coverings,",
						"          H6_Flag,",
						"          H7_Vaccination_policy,",
						"          H7_Flag,",
						"          H8_Protection_of_elderly_people,",
						"          H8_Flag,",
						"          M1_Wildcard,",
						"          StringencyIndex,",
						"          StringencyIndexForDisplay,",
						"          StringencyLegacyIndex,",
						"          StringencyLegacyIndexForDisplay,",
						"          GovernmentResponseIndex,",
						"          GovernmentResponseIndexForDisplay,",
						"          ContainmentHealthIndex,",
						"          ContainmentHealthIndexForDisplay,",
						"          EconomicSupportIndex,",
						"          EconomicSupportIndexForDisplay,",
						"          Countryid = Country_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 keyGenerate(output(PolicyID as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> surrogateKey2",
						"surrogateKey1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CasesID as integer,",
						"          Updated as date,",
						"          Confirmed as integer,",
						"          Confirmed_Change as integer,",
						"          Country_Region as string",
						"     ),",
						"     format: 'parquet',",
						"     partitionFileNames:['metrics.parquet'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"surrogateKey2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'parquet',",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ODS')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow ODS",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "ODS",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MetricsVM": {},
									"MetricsSQL": {},
									"DatesSQL": {},
									"CountrySQL": {},
									"PolicyDB": {},
									"Cases": {},
									"Deaths": {},
									"Recoveries": {},
									"Dates": {},
									"Policies": {},
									"Countries": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-12-15T22:01:19Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/ODS')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/VmSql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Country",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "vmsql1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetCountryVM",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "covid metrics",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable1",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetMetricsVM",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "date",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "ParquetSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "ParquetWriteSettings"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "SqlServerTable2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ParquetDatesVM",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-11-09T18:16:00Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/vmsql1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable1')]",
				"[concat(variables('factoryId'), '/datasets/SqlServerTable2')]"
			]
		}
	]
}